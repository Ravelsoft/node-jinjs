{ defaultEnvironment } = require \./environment
{ readFileSync } = require \fs

/**
 *  Register an extension to use with NodeJS, so that require-ing a
 *  template transforms it automatically into a template.
 *  @param ext: the extension
 *  @param filter: a callback (str) -> that transforms the source before
 *      giving it to JinJS.
 */
function registerExtension (ext, filter)
    filter ?= (str) -> str

    require.extensions[ext] = (module, filename) ->
        # Call directly taken from coco.
        javascript_file = defaultEnvironment.getTemplateSourceFromString filter readFileSync filename, \utf-8
        # console.log javascript_file
        module._compile javascript_file, filename

# registerExtension \.pwi, (str) -> pwilang.parse str
# registerExtension \.pwx, (str) -> pwilang.parse str

/**
 * Register flag to output undefined variables
 * @param output: flag to output undefined variable name
 * @param withBrackets: flag to output undefined variable name with brackets
 */
function outputUndefinedVariable (output, withBrackets)
    output ?= true
    withBrackets ?= false
    
    defaultEnvironment.outputUndefinedVariable = output
    defaultEnvironment.outputUndefinedVariableWithBrackets = withBrackets

/**
 * Options for JinJS
 * @param opts: object where the properties are set
 */
function options (opts)
    opts ?= {}
    
    # Check if extensions passed
    if opts.extensions
        for index, extension in opts.extensions
            registerExtension extension.ext, extension.filter
            
    # Check if outputUndefinedVariable is defined
    if opts.outputUndefinedVariable
        outputUndefinedVariable opts.outputUndefinedVariable, opts.outputUndefinedVariableWithBrackets

exports import { registerExtension, outputUndefinedVariable, options }

