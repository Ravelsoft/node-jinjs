{ Parser } = require \./parser
{ render: render_template } = require \./module_template

class Environment
    $evalTemplateObject = (t, env) ->
        environment = env
        return eval t

    (specs) ->
        specs ?= {}
        @filter_exp = specs.filter_exp
        @require_exp = specs.require_exp
        @util_exp = specs.util_exp
        @parser = specs.parser ? new Parser()

    getTemplateFromString: (str) ->
        try
            exports = {} # Necessary to get the render() function
            compiled = @getTemplateSourceFromString str
            eval compiled
            return exports
        catch e
            if e instanceof SyntaxError
                console.log compiled
            throw e

    getTemplateSourceFromString: (str) ->
        ast = @parser.parse str
        opts = __indent__: 1

        body = ast.compile opts, {}
        opts <<< { body, @filter_exp, @require_exp, @util_exp }
        return render_template opts


exports import {
    defaultEnvironment: new Environment()
    fileOutputEnvironment: new Environment filters: "require('jinjs/lib/filters')", loader: "require"
    Environment
    }

