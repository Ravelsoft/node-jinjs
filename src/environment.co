exports.default_env = filters: {}
_filters = exports.default_env.filters

_filters["in"] = (obj, arr) ->
    x = null
    for x in arr
        if arr.hasOwnProperty (x) and obj is arr[x]
            return true
    return false

_filters.abs = function (num) ->
    return -num if num < 0
    num

_filters.capitalize = function (str) ->
    return str.charAt(0).toUpperCase() + str.slice(1)

_filters["default"] = (value, default_value) ->
    return default_value if value is undefined
    value

_filters.filesizeformat = function (value) ->
    # FIXME : value is a number, make it smaller to get
    # xxMb, xxGb, xxKb
    return value

_filters.first = function (arr) ->
    return arr[0]

_filters.last = function (arr) ->
    return null if not arr?.length
    arr[arr.length - 1]

_filters.groupby = function (arr, attribute) ->
    # FIXME : Chain objects in array that have the same attribute.
    return _arr

_filters.join = function (arr, string) ->
    i = 0
    _l = arr.length
    _res = ""

    for i from 0 to l - 1
        if i > 0
            _res += string
        _res += arr[i].toString ()
    return _res

_filters.length = function (arr) ->
    if not arr?
        return 0
    arr.length

_filters.lower = function (value) ->
    value.toLowerCase ()

_filters.upper = function (value) ->
    value.toUpperCase ()

_filters.replace = function (string, regexp, newvalue) ->
    string.replace regexp, newvalue

_filters.reverse = function (arr) ->
    arr.reverse ()

_filters.round = function (value, precision) ->
    value # FIXME
